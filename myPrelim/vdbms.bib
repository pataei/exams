% Journals
@string{JFP   = {{Journal of Functional Programming (JFP)}}}
@string{JVLC  = {{Journal of Visual Languages and Computing (JVLC)}}}
@string{TOPLAS = {{ACM Trans.\ on Programming Languages and Systems (TOPLAS)}}}
@string{TOSEM = {{ACM Trans.\ on Software Engineering and Methodology (TOSEM)}}}

% Conferences
@string{DSL   = {{IFIP Working Conf.\ on Domain-Specific Languages (DSL)}}}
@string{DTM   = {{ASME Int.\ Design Engineering Technical Conf.\ \& Computers and Information in Engineering Conf. (IDETC/CIE)}}}
@string{ECOOP = {{European Conf.\ on Object-Oriented Programming (ECOOP)}}}
@string{GPCE  = {{ACM SIGPLAN Int.\ Conf.\ on Generative Programming: Concepts and Experiences (GPCE)}}}
@string{GTTSE = {{Generative and Transformational Techniques in Software Engineering (GTTSE)}}}
@string{ICFP  = {{ACM SIGPLAN Int.\ Conf.\ on Functional Programming (ICFP)}}}
@string{ICSME = {{IEEE Int.\ Conf.\ on Software Maintenance and Evolution (ICSME)}}}
@string{Onward = {{ACM SIGPLAN Symp.\ on New Ideas in Programming and Reflections on Software (Onward!)}}}
@string{SLE   = {{Int.\ Conf.\ on Software Language Engineering (SLE)}}}
@string{VLHCC = {{IEEE Int.\ Symp.\ on Visual Languages and Human-Centric Computing (VL/HCC)}}}

% Workshops
@string{FOSD  = {{Int.\ Work.\ on Feature-Oriented Software Development (FOSD)}}}
@string{FoSER = {{ACM SIGSOFT Workshop on the Future of Software Engineering Research}}}
@string{Mutation = {{Int.\ Work.\ on Mutation Analysis (Mutation)}}}
@string{VaMoS = {{Int.\ Work.\ on Variability Modelling of Software-Intensive Systems (VaMoS)}}}

% Series
@string{LNCS  = {{LNCS}}}

@inproceedings{RAtypeSys,
author = {Ohori, Atsushi and Buneman, Peter},
title = {Type Inference in a Database Programming Language},
year = {1988},
isbn = {089791273X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/62678.62700},
doi = {10.1145/62678.62700},
booktitle = {Proceedings of the 1988 ACM Conference on LISP and Functional Programming},
pages = {174–183},
numpages = {10},
location = {Snowbird, Utah, USA},
series = {LFP ’88}
}


@inproceedings{EricSPLEvolve19,
author = {Th\"{u}m, Thomas and Teixeira, Leopoldo and Schmid, Klaus and Walkingshaw, Eric and Mukelabai, Mukelabai and Varshosaz, Mahsa and Botterweck, Goetz and Schaefer, Ina and Kehrer, Timo},
title = {Towards Efficient Analysis of Variation in Time and Space},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342414},
doi = {10.1145/3307630.3342414},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {57–64},
numpages = {8},
keywords = {software variation, regression analysis, variability management, software configuration management, variability-aware analysis, software product lines, software evolution, product-line analysis},
location = {Paris, France},
series = {SPLC ’19}
}

@Inbook{splEvolveBP14,
author="Botterweck, Goetz
and Pleuss, Andreas",
editor="Mens, Tom
and Serebrenik, Alexander
and Cleve, Anthony",
title="Evolution of Software Product Lines",
bookTitle="Evolving Software Systems",
year="2014",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="265--295",
abstract="A Software Product Line (SPL) aims to support the development of a family of similar software products from a common set of shared assets. SPLs represent a long-term investment and have a considerable life-span. In order to realize a return-on-investment, companies dealing with SPLs often plan their product portfolios and software engineering activities strategically over many months or years ahead. Compared to single system engineering, SPL evolution exhibits higher complexity due to the variability and the interdependencies between products. This chapter provides an overview on concepts and challenges in SPL evolution and summarizes the state of the art. For this we first describe the general process for SPL evolution and general modeling concepts to specify SPL evolution. On this base, we provide an overview on the state-of-the-art in each of the main process tasks which are migration towards SPLs, analysis of (existing) SPL evolution, planning of future SPL evolution, and implementation of SPL evolution.",
isbn="978-3-642-45398-4",
doi="10.1007/978-3-642-45398-4_9",
url="https://doi.org/10.1007/978-3-642-45398-4_9"
}

@incollection{QiaoranRep,
  author    = {Li, Qiaoran},
  title     = {Application of the Variational Database Management System to Schema Evolution and Software Product Lines},
  booktitle = {MS Project Report},
  publisher = {Oregon State University},
  year      = 2019,
  note      = {\url{https://web.engr.oregonstate.edu/~walkiner/student-theses/li-19-ms-project.pdf}},
  kind      = {Technical Report}
}


@inproceedings{dbSPLevolve,
  title={Database Evolution for Software Product Lines},
  author={Kai Herrmann and Jan Reimann and Hannes Voigt and Birgit Demuth and Stefan Fromm and Robert Stelzmann and Wolfgang Lehner},
  booktitle={DATA},
  year={2015}
}

@incollection{Walk13thesis,
  author    = {Walkingshaw, Eric},
  title     = {{The Choice Calculus: A Formal Language of Variation}},
  booktitle = {{PhD Dissertation}},
  publisher = {Oregon State University},
  year      = 2013,
  note      = {\url{http://hdl.handle.net/1957/40652}},
  kind      = {Thesis},
  status    = {Appeared}
}

@inproceedings{emailSys,
 author = {Apel, Sven and Speidel, Hendrik and Wendler, Philipp and von Rhein, Alexander and Beyer, Dirk},
 title = {Detection of Feature Interactions Using Feature-aware Verification},
 booktitle = ASE,
 year = {2011},
 isbn = {978-1-4577-1638-6},
 pages = {372--375},
 numpages = {4},
 url = {http://dx.doi.org/10.1109/ASE.2011.6100075},
 doi = {10.1109/ASE.2011.6100075},
 acmid = {2190192},
 status={appeared},
} 


@inproceedings{cppSpl,
author = {Liebig, J\"{o}rg and Apel, Sven and Lengauer, Christian and K\"{a}stner, Christian and Schulze, Michael},
title = {An Analysis of the Variability in Forty Preprocessor-based Software Product Lines},
booktitle = ICSE,
year = {2010},
isbn = {978-1-60558-719-6},
location = {Cape Town, South Africa},
pages = {105--114},
numpages = {10},
url = {http://doi.acm.org/10.1145/1806799.1806819},
doi = {10.1145/1806799.1806819},
acmid = {1806819},
keywords = {C preprocessor, empirical study, software product lines},
}


@inproceedings{EWC13fosd,
  author    = {Erwig, Martin and Walkingshaw, Eric and Chen, Sheng},
  title     = {{An Abstract Representation of Variational Graphs}},
  booktitle = FOSD,
  year      = 2013,
  pages     = {25--32},
  kind      = {Workshop},
  status    = {Appeared},
  rate      = {69\%},
  abstract  = {In the context of software product lines, there is often a need to represent graphs containing variability. For example, extending traditional modeling techniques or program analyses to variational software requires a corresponding notion of variational graphs. But variational graphs are much more broadly useful and can be employed in many other applications outside of software product line analyses. To emphasize this generality we use a variational route-planning application as a motivating example throughout the paper. In this paper, we introduce a general model of variational graphs and a theoretical framework for discussing variational graph algorithms. Specifically, we present an abstract syntax based on tagging for succinctly representing variational graphs and other data types relevant to variational graph algorithms, such as variational sets and paths. We demonstrate how (non-variational) graph algorithms can be generalized to operate on variational graphs, to accept variational inputs, and produce variational outputs. Finally, we discuss a filtering operation on variational graphs and how this interacts with variational graph algorithms.}
}

@article{EW13jvlc,
  author   = {Erwig, Martin and Walkingshaw, Eric},
  title    = {{A Visual Language for Explaining Probabilistic Reasoning}},
  journal  = JVLC,
  year     = 2013,
  volume   = 24,
  number   = 2,
  pages    = {88--109},
  kind     = {Journal},
  status   = {Appeared},
  abstract = {We present an explanation-oriented, domain-specific, visual language for explaining probabilistic reasoning. Explanation-oriented programming is a new paradigm that shifts the focus of programming from the computation of results to explanations of how those results were computed. Programs in this language therefore describe explanations of probabilistic reasoning problems. The language relies on a storytelling metaphor of explanation, where the reader is guided through a series of well-understood steps from some initial state to the final result. Programs can also be manipulated according to a set of laws to automatically generate equivalent explanations from one explanation instance. This increases the explanatory value of the language by allowing readers to cheaply derive alternative explanations if they do not understand the first. The language is comprised of two parts: a formal textual notation for specifying explanation-producing programs and the more elaborate visual notation for presenting those explanations. We formally define the abstract syntax of explanations and define the semantics of the textual notation in terms of the explanations that are produced.}
}

@inproceedings{EORW13vamos,
  author    = {Erwig, Martin and Ostermann, Klaus and Rendel, Tillmann and Walkingshaw, Eric},
  title     = {{Adding Configuration to the Choice Calculus}},
  booktitle = VaMoS,
  year      = 2013,
  pages     = {13:1--13:8},
  kind      = {Workshop},
  status    = {Appeared},
  rate      = {42\%},
  abstract  = {The choice calculus is a formal language for representing variation in software artifacts. Variability is organized in the choice calculus through the use of dimensions, where each dimension represents a decision that must be made in order to obtain a particular variant. However, the process of selecting alternatives from dimensions was relegated to an external operation. This precludes many interesting variation and reuse patterns, such as nested product lines, and theoretical results, such as a syntactic description of configuration, that would be possible if selection were a part of the language itself. \\ In this paper we add a selection operation to the choice calculus and illustrate how that increases the expressiveness of the calculus. We investigate some alternative semantics of this operation and study their impact and utility. Specifically, we will examine selection in the context of static and dynamically scoped dimension declarations, as a well as a modest and greedy form of dimension elimination. We also present a design for a type system to ensure configuration safety and modularity of nested product lines.}
}

@inproceedings{WE12gpce,
  author    = {Walkingshaw, Eric and Erwig, Martin},
  title     = {{A Calculus for Modeling and Implementing Variation}},
  booktitle = {{ACM SIGPLAN Int.\ Conf.\ on Generative Programming and Component Engineering (GPCE)}},
  year      = 2012,
  pages     = {132--140},
  kind      = {Conference},
  status    = {Appeared},
  pdfname   = {CCC_GPCE12.pdf},
  rate      = {43\%},
  abstract  = {We present a formal calculus for modeling and implementing variation in software. It unifies the compositional and annotative approaches to feature implementation and supports the development of abstractions that can be used to directly relate feature models to their implementation. Since the compositional and annotative approaches are complementary, the calculus enables implementers to use the best combination of tools for the job and focus on inherent feature interactions, rather than those introduced by biases in the representation. The calculus also supports the abstraction of recurring variational patterns and provides a metaprogramming platform for organizing variation in artifacts.}
}

@inproceedings{CEW12icfp,
  author    = {Chen, Sheng and Erwig, Martin and Walkingshaw, Eric},
  title     = {{An Error-Tolerant Type System for Variational Lambda Calculus}},
  booktitle = ICFP,
  year      = 2012,
  pages     = {29--40},
  kind      = {Conference},
  status    = {Appeared},
  pdfname   = {VariTypes+Errors_ICFP12.pdf},
  rate      = {36\%},
  abstract  = {Conditional compilation and software product line technologies make it possible to generate a huge number of different programs from a single software project. Typing each of these programs individually is usually impossible due to the sheer number of possible variants. Our previous work has addressed this problem with a type system for variational lambda calculus (VLC), an extension of lambda calculus with basic constructs for introducing and organizing variation. Although our type inference algorithm is more efficient than the brute-force strategy of inferring the types of each variant individually, it is less robust since type inference will fail for the entire variational expression if any one variant contains a type error. In this work, we extend our type system to operate on VLC expressions containing type errors. This extension directly supports locating ill-typed variants and the incremental development of variational programs. It also has many subtle implications for the unification of variational types. We show that our extended type system possesses a principal typing property and that the underlying unification problem is unitary. Our unification algorithm computes partial unifiers that lead to result types that (1) contain errors in as few variants as possible and (2) are most general. Finally, we perform an empirical evaluation to determine the overhead of this extension compared to our previous work, to demonstrate the improvements over the brute-force approach, and to explore the effects of various error distributions on the inference process.}
}

@incollection{EW12dsl,
  author    = {Erwig, Martin and Walkingshaw, Eric},
  title     = {{Semantics-Driven DSL Design}},
  booktitle = {{Formal and Practical Aspects of Domain-Specific Languages: Recent Developments}},
  editor    = {Mernik, Marjan},
  pages     = {56--80},
  publisher = {IGI Global},
  year      = 2012,
  kind      = {Chapter},
  status    = {Appeared},
  rate      = {44\%},
  abstract  = {Convention dictates that the design of a language begins with its syntax. We argue that early emphasis should be placed instead on the identification of general, compositional semantic domains, and that grounding the design process in semantics leads to languages with more consistent and more extensible syntax.  We demonstrate this semantics-driven design process through the design and implementation of a DSL for defining and manipulating calendars, using Haskell as a metalanguage to support this discussion. We emphasize the importance of compositionality in semantics-driven language design, and describe a set of language operators that support an incremental and modular design process.},
}

@inproceedings{EW11gttse,
  author    = {Erwig, Martin and Walkingshaw, Eric},
  title     = {{Variation Programming with the Choice Calculus}},
  booktitle = GTTSE,
  year      = 2012,
  pages     = {55--99},
  kind      = {Chapter},
  status    = {Appeared},
  abstract  = {The choice calculus provides a language for representing and transforming variation in software and other structured documents. Variability is captured in localized choices between alternatives. The space of all variations is organized by dimensions, which provide scoping and structure to choices. The variation space can be reduced through a process of selection, which eliminates a dimension and resolves all of its associated choices by replacing each with one of their alternatives. The choice calculus also allows the definition of arbitrary functions for the flexible construction and transformation of all kinds of variation structures. In this tutorial we will first present the motivation, general ideas, and principles that underlie the choice calculus. This is followed by a closer look at the semantics. We will then present practical applications based on several small example scenarios and consider the concepts of ``variation programming'' and ``variation querying''. The practical applications involve work with a Haskell library that supports variation programming and experimentation with the choice calculus.},
}

@inproceedings{LWE11vl,
  author    = {Le, Duc and Walkingshaw, Eric and Erwig, Martin},
  title     = {{\#ifdef Confirmed Harmful: Promoting Understandable Software Variation}},
  booktitle = VLHCC,
  year      = 2011,
  pages     = {143--150},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {33\%},
  abstract  = {Maintaining variation in software is a difficult problem that poses serious challenges for the understanding and editing of software artifacts. Although the C preprocessor (CPP) is often the default tool used to introduce variability to software, because of its simplicity and flexibility, it is infamous for its obtrusive syntax and has been blamed for reducing the comprehensibility and maintainability of software. In this paper, we address this problem by developing a prototype for managing software variation at the source code level. We evaluate the difference between our prototype and CPP with a user study, which indicates that the prototype helps users reason about variational code faster and more accurately than CPP. Our results also support the research of others, providing evidence for the effectiveness of related tools, such as CIDE and FeatureCommander.},
}

@inproceedings{WE11dsl,
  author    = {Walkingshaw, Eric and Erwig, Martin},
  title     = {{A DSEL for Studying and Explaining Causation}},
  booktitle = DSL,
  year      = 2011,
  pages     = {143--167},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {50\%},
  abstract  = {We present a domain-specific embedded language (DSEL) in Haskell that supports the philosophical study and practical explanation of causation. The language provides constructs for modeling situations comprised of events and functions for reliably determining the complex causal relationships that emerge between these events. It enables the creation of visual explanations of these causal relationships and a means to systematically generate alternative, related scenarios, along with corresponding outcomes and causes. The DSEL is based on neuron diagrams, a visual notation that is well established in practice and has been successfully employed for causation explanation and research. In addition to its immediate applicability by users of neuron diagrams, the DSEL is extensible, allowing causation experts to extend the notation to introduce special-purpose causation constructs. The DSEL also extends the notation of neuron diagrams to operate over non-boolean values, improving its expressiveness and offering new possibilities for causation research and its applications.},
}

@inproceedings{EW11sle,
  author    = {Erwig, Martin and Walkingshaw, Eric},
  title     = {{Semantics First! Rethinking the Language Design Process}},
  booktitle = SLE,
  series    = LNCS,
  volume    = 6940,
  year      = 2011,
  pages     = {243--262},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {44\%},
  abstract  = {The design of languages is still more of an art than an engineering discipline. Although recently tools have been put forward to support the language design process, such as language workbenches, these have mostly focused on a syntactic view of languages. While these tools are quite helpful for the development of parsers and editors, they provide little support for the underlying design of the languages. In this paper we illustrate how to support the design of languages by focusing on their semantics first. Specifically, we will show that powerful and general language operators can be employed to adapt and grow sophisticated languages out of simple semantics concepts. We use Haskell as a metalanguage and will associate generic language concepts, such as semantics domains, with Haskell-specific ones, such as data types. We do this in a way that clearly distinguishes our approach to language design from the traditional syntax-oriented one. This will reveal some unexpected correlations, such as viewing type classes as language multipliers. We illustrate the viability of our approach with several real-world examples.},
}

@article{EW11tosem,
  author    = {Erwig, Martin and Walkingshaw, Eric},
  title     = {{The Choice Calculus: A Representation for Software Variation}},
  journal   = TOSEM,
  volume    = 21,
  number    = 1,
  year      = 2011,
  pages     = {6:1--6:27},
  kind      = {Journal},
  status    = {Appeared},
  abstract  = {Many areas of computer science are concerned with some form of variation in software--from managing changes to software over time, to supporting families of related artifacts. We present the choice calculus, a fundamental representation for software variation that can serve as a common language of discourse for variation research, filling a role similar to the lambda calculus in programming language research. We also develop an associated theory of software variation, including sound transformations of variation artifacts, the definition of strategic normal forms, and a design theory for variation structures, which will support the development of better algorithms and tools.},
}

@inproceedings{EW10foser,
  author    = {Erwig, Martin and Walkingshaw, Eric},
  title     = {{Program Fields for Continuous Software}},
  booktitle = FoSER,
  year      = 2010,
  pages     = {105--108},
  kind      = {Workshop},
  status    = {Appeared},
  rate      = {63\%},
  abstract  = {We propose program fields, a formal representation for groups of related programs, as a new abstraction to support future software engineering research in several areas. We will discuss opportunities offered by program fields and research questions that have to be addressed.},
}

@inproceedings{EW10vl,
  author    = {Erwig, Martin and Walkingshaw, Eric},
  title     = {{Causal Reasoning with Neuron Diagrams}},
  booktitle = VLHCC,
  year      = 2010,
  pages     = {101--108},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {29\%},
  abstract  = {The principle of causation is fundamental to science and society and has remained an active topic of discourse in philosophy for over two millennia. Modern philosophers often rely on "neuron diagrams", a domain-specific visual language for discussing and reasoning about causal relationships and the concept of causation itself. In this paper we formalize the syntax and semantics of neuron diagrams. We discuss existing algorithms for identifying causes in neuron diagrams, show how these approaches are flawed, and propose solutions to these problems. We separate the standard representation of a dynamic execution of a neuron diagram from its static definition and define two separate, but related semantics, one for the causal effects of neuron diagrams and one for the identification of causes themselves. Most significantly, we propose a simple language extension that supports a clear, consistent, and comprehensive algorithm for automatic causal inference.},
}

@inproceedings{W10vld,
  author    = {Walkingshaw, Eric},
  title     = {{Managing Variation in Explanation-Oriented Languages}},
  booktitle = {{Doctoral Consortium at }} # VLHCC,
  year      = 2010,
  pages     = {247--248},
  kind      = {Consortium},
  status    = {Appeared},
  abstract  = {This work considers the intersection of explanation-oriented language design and software variation management, two seemingly disparate research areas that turn out to be quite complementary. Successful explanations are often highly variable to adapt to the needs of a particular user, but this also makes them complex and unwieldy unless supported by a sound theory of variation.}
}

@incollection{qual,
  author    = {Walkingshaw, Eric},
  title     = {{Features and Feature Models: A Survey of Variation Representations}},
  booktitle = {{Compendium of Computer Science Doctoral Qualifying Exams}},
  publisher = {Oregon State University},
  year      = 2010,
  note      = {\url{http://hdl.handle.net/1957/19243}},
  kind      = {Thesis},
  status    = {Appeared},
  abstract  = {This survey explores and organizes existing work on the long-term management of software that varies in multiple dimensions. It focuses, in particular, on the representation of features in software product lines, and on capturing relationships between features in feature models.}
}

@inproceedings{EW09vl,
  author    = {Erwig, Martin and Walkingshaw, Eric},
  title     = {{Visual Explanations of Probabilistic Reasoning}},
  booktitle = VLHCC,
  year      = 2009,
  pages     = {23--27},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {29\%},
  abstract  = {Continuing our research in explanation-oriented language design, we present a domain-specific visual language for explaining probabilistic reasoning. Programs in this language, called explanation objects, can be manipulated according to a set of laws to automatically generate many equivalent explanation instances. We argue that this increases the explanatory power of our language by allowing a user to view a problem from many different perspectives.},
}

@inproceedings{WSEMT09,
  author    = {Walkingshaw, Eric and Strauss, Paul and Erwig, Martin and Mueller, Jonathan and Tumer, Irem},
  title     = {{A Formal Representation of Software-Hardware System Design}},
  booktitle = DTM,
  year      = 2009,
  pages     = {1387--1398},
  kind      = {Conference},
  status    = {Appeared},
  abstract  = {The design of hardware-software systems is a complex and difficult task exacerbated by the very different tools used by designers in each field. Even in small projects, tracking the impact, motivation and context of individual design decisions between designers and over time quickly becomes intractable. In an attempt to bridge this gap, we present a general, low-level model of the system design process. We formally define the concept of a design decision, and provide a hierarchical representation of both the design space and the context in which decisions are made. This model can serve as a foundation for software-hardware system design tools which will help designers cooperate more efficiently and effectively. We provide a high-level example of the use of such a system in a design problem provided through collaboration with NASA.},
}

@article{WE09jfp,
  author    = {Walkingshaw, Eric and Erwig, Martin},
  title     = {{A Domain-Specific Language for Experimental Game Theory}},
  journal   = JFP,
  volume    = 19,
  year      = 2009,
  pages     = {645--661},
  kind      = {Journal},
  status    = {Appeared},
  abstract  = {Experimental game theory is increasingly important for research in many ﬁelds. Unfortunately, it is poorly supported by computer tools. We have created Hagl, a domain-speciﬁc language embedded in Haskell, to reduce the development time of game-theoretic experiments and make the deﬁnition and exploration of games and strategies simple and fun.}
}
  

@inproceedings{EW09dsl,
  author    = {Erwig, Martin and Walkingshaw, Eric},
  title     = {{A DSL for Explaining Probabilistic Reasoning}},
  booktitle = DSL,
  series    = LNCS,
  volume    = 5658,
  year      = 2009,
  pages     = {335--359},
  cvnote    = {\textbf{Best Paper}},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {37\%},
  abstract  = {We propose a new focus in language design where languages provide constructs that not only describe the computation of results, but also produce explanations of how and why those results were obtained. We posit that if users are to understand computations produced by a language, that language should provide explanations to the user.  As an example of such an explanation-oriented language we present a domain-specific language for explaining probabilistic reasoning, a domain that is not well understood by non-experts. We show the design of the DSL in several steps. Based on a story-telling metaphor of explanations, we identify generic constructs for building stories out of events, and obtaining explanations by applying stories to specific examples. These generic constructs are then adapted to the particular explanation domain of probabilistic reasoning. Finally, we develop a visual notation for explaining probabilistic reasoning.},
}

@inproceedings{WE09dsl,
  author    = {Walkingshaw, Eric and Erwig, Martin},
  title     = {{Varying Domain Representations in Hagl -- Extending the Expressiveness of a DSL for Experimental Game Theory}},
  booktitle = DSL,
  series    = LNCS,
  volume    = 5658,
  year      = 2009,
  pages     = {310--334},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {37\%},
  abstract  = {Experimental game theory is an increasingly important research tool in many fields, providing insight into strategic behavior through simulation and experimentation on game theoretic models. Unfortunately, despite relying heavily on automation, this approach has not been well supported by tools. Here we present our continuing work on Hagl, a domain-specific language embedded in Haskell, intended to drastically reduce the development time of such experiments and support a highly explorative research style.  In this paper we present a fundamental redesign of the underlying game representation in Hagl. These changes allow us to better leverage domain knowledge by allowing different classes of games to be represented differently, exploiting existing domain representations and algorithms. In particular, we show how this supports analytical extensions to Hagl, and makes strategies for state-based games vastly simpler and more efficient.},
}
@inproceedings{dbDecay16Stonebraker,
title = {Database Decay and How to Avoid It},
author = {Stonebraker, Micheal and Deng, Dong and Brodie, Micheal L.},
year = {2016},
booktitle = { Big Data (Big Data), 2016 IEEE International Conference},
doi = {10.1109/BigData.2016.7840584},
publisher = {IEEE}
}

@article{prima08Moon,
 author = {Moon, Hyun J. and Curino, Carlo A. and Deutsch, Alin and Hou, Chien-Yi and Zaniolo, Carlo},
 title = {Managing and Querying Transaction-time Databases Under Schema Evolution},
 journal = {Proc. VLDB Endow.},
 issue_date = {August 2008},
 volume = {1},
 number = {1},
 month = aug,
 year = {2008},
 issn = {2150-8097},
 pages = {882--895},
 numpages = {14},
 url = {http://dx.doi.org/10.14778/1453856.1453952},
 doi = {10.14778/1453856.1453952},
 acmid = {1453952},
 publisher = {VLDB Endowment},
} 

@article{schEvolUnifyApp,
title = "Database application evolution: A transformational approach",
journal = "Data \& Knowledge Engineering",
volume = "59",
number = "3",
pages = "534 - 558",
year = "2006",
note = "Including: ER 2003",
issn = "0169-023X",
doi = "https://doi.org/10.1016/j.datak.2005.10.003",
url = "http://www.sciencedirect.com/science/article/pii/S0169023X05001631",
author = "Jean-Marc Hick and Jean-Luc Hainaut",
keywords = "Evolution, Database conversion, Schema transformation, History, Reverse engineering, CASE tools",
abstract = "While recent data management technologies, such as object oriented techniques, address the problem of database schema evolution, standard information systems currently in use raise challenging evolution problems. This paper examines database evolution from the developer point of view. It shows how requirements changes are propagated to database schemas, to data and to programs through a general strategy. This strategy requires the documentation of database design. When absent, such documentation has to be rebuilt through reverse engineering techniques. Our approach, called DB-MAIN, relies on a generic database model and on transformational paradigm that states that database engineering processes can be modeled by schema transformations. Indeed, a transformation provides both structural and instance mappings that formally define how to modify database structures and contents. We describe both the complete and a simplified approaches, and compare their merits and drawbacks. We then analyze the problem of program modification and describe a CASE tool that can assist developers in their task of system evolution. We illustrate our approach with Biomaze, a biochemical knowledge-based the database of which is rapidly evolving."
}

@article{dbVersioning,
 author = {Huang, Silu and Xu, Liqi and Liu, Jialin and Elmore, Aaron J. and Parameswaran, Aditya},
 title = {OrpheusDB: Bolt-on Versioning for Relational Databases},
 journal = {Proc. VLDB Endow.},
 issue_date = {June 2017},
 volume = {10},
 number = {10},
 month = jun,
 year = {2017},
 issn = {2150-8097},
 pages = {1130--1141},
 numpages = {12},
 url = {http://dl.acm.org/citation.cfm?id=3115404.3115417},
 acmid = {3115417},
 publisher = {VLDB Endowment},
} 

@article{datasetVersioning,
 author = {Bhattacherjee, Souvik and Chavan, Amit and Huang, Silu and Deshpande, Amol and Parameswaran, Aditya},
 title = {Principles of Dataset Versioning: Exploring the Recreation/Storage Tradeoff},
 journal = {Proc. VLDB Endow.},
 issue_date = {August 2015},
 volume = {8},
 number = {12},
 month = aug,
 year = {2015},
 issn = {2150-8097},
 pages = {1346--1357},
 numpages = {12},
 url = {http://dx.doi.org/10.14778/2824032.2824035},
 doi = {10.14778/2824032.2824035},
 acmid = {2824035},
 publisher = {VLDB Endowment},
} 

@inproceedings{castor,
 author = {Picado, Jose and Termehchy, Arash and Fern, Alan and Ataei, Parisa},
 title = {Schema Independent Relational Learning},
 booktitle = {Proceedings of the 2017 ACM International Conference on Management of Data},
 series = {SIGMOD '17},
 year = {2017},
 isbn = {978-1-4503-4197-4},
 location = {Chicago, Illinois, USA},
 pages = {929--944},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/3035918.3035923},
 doi = {10.1145/3035918.3035923},
 acmid = {3035923},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {learning over relational databases, machine learning, relational learning, schema independence, schema transformations},
} 

@book{dataIntegBook,
 author = {Doan, AnHai and Halevy, Alon and Ives, Zachary},
 title = {Principles of Data Integration},
 year = {2012},
 isbn = {0124160441, 9780124160446},
 edition = {1st},
 publisher = {Morgan Kaufmann Publishers Inc.},
 address = {San Francisco, CA, USA},
} 

@inproceedings{dbSchVarSPL,
  author    = {Niloofar Khedri and
               Ramtin Khosravi},
  title     = {Handling Database Schema Variability in Software Product Lines},
  booktitle = {20th Asia-Pacific Software Engineering Conference, {APSEC} 2013, Ratchathewi,
               Bangkok, Thailand, December 2-5, 2013 - Volume 1},
  pages     = {331--338},
  year      = {2013},
  crossref  = {DBLP:conf/apsec/2013-1},
  url       = {https://doi.org/10.1109/APSEC.2013.52},
  doi       = {10.1109/APSEC.2013.52},
  timestamp = {Wed, 17 May 2017 14:24:54 +0200},
  biburl    = {http://dblp.org/rec/bib/conf/apsec/KhedriK13},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{varMngDBapp,
 author = {Humblet, Mathieu and Tran, Dang Vinh and Weber, Jens H. and Cleve, Anthony},
 title = {Variability Management in Database Applications},
 booktitle = {Proceedings of the 1st International Workshop on Variability and Complexity in Software Design},
 series = {VACE '16},
 year = {2016},
 isbn = {978-1-4503-4176-9},
 location = {Austin, Texas},
 pages = {21--27},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/2897045.2897050},
 doi = {10.1145/2897045.2897050},
 acmid = {2897050},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {database applications, software product families, variability management},
} 

@book{splBook,
 title = {Software Product Lines: Practices and Patterns},
 year = {2001},
 isbn = {0-201-70332-7},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
key = {{$\!\!$}} ,
} 

@article{emailSPL,
author = {Hall, Robert J.},
title = {Fundamental Nonmodularity in Electronic Mail},
year = {2005},
issue_date = {January 2005},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {12},
number = {1},
issn = {0928-8910},
url = {https://doi.org/10.1023/B:AUSE.0000049208.84702.84},
doi = {10.1023/B:AUSE.0000049208.84702.84},
journal = {Automated Software Engg.},
month = jan,
pages = {41–79},
numpages = {39},
keywords = {feature interaction, validation, specification, electronic mail}
}



@inproceedings{vdb17ATW,
  author    = {Parisa Ataei and
               Arash Termehchy and
               Eric Walkingshaw},
  title     = {Variational databases},
  booktitle = {Proceedings of The 16th International Symposium on Database Programming
               Languages, {DBPL} 2017, Munich, Germany, September 1, 2017},
  pages     = {11:1--11:4},
  year      = {2017},
  crossref  = {DBLP:conf/dbpl/2017},
  url       = {http://doi.acm.org/10.1145/3122831.3122839},
  doi       = {10.1145/3122831.3122839},
  timestamp = {Fri, 08 Sep 2017 09:23:35 +0200},
  biburl    = {http://dblp.org/rec/bib/conf/dbpl/AtaeiTW17},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@misc{vldbArXiv,
    title={Managing Variability in Relational Databases by VDBMS},
    author={Parisa Ataei and Qiaoran Li and Eric Walkingshaw and Arash Termehchy},
    year={2019},
    eprint={1911.11184},
    archivePrefix={arXiv},
    primaryClass={cs.DB}
}

@inproceedings{vdbSpl18ATW,
  author    = {Parisa Ataei and
               Arash Termehchy and
               Eric Walkingshaw},
  title     = {Managing Structurally Heterogeneous Databases in Software Product
               Lines},
  booktitle = {Heterogeneous Data Management, Polystores, and Analytics for Healthcare
               - {VLDB} 2018 Workshops, Poly and DMAH, Rio de Janeiro, Brazil, August
               31, 2018, Revised Selected Papers},
  pages     = {68--77},
  year      = {2018},
  crossref  = {DBLP:conf/vldb/2018polydmah},
  url       = {https://doi.org/10.1007/978-3-030-14177-6\_6},
  doi       = {10.1007/978-3-030-14177-6\_6},
  timestamp = {Fri, 28 Jun 2019 09:05:04 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/vldb/AtaeiTW18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{EW08vl,
  author    = {Erwig, Martin and Walkingshaw, Eric},
  title     = {{A Visual Language for Representing and Explaining Strategies in Game Theory}},
  booktitle = VLHCC,
  year      = 2008,
  pages     = {101--108},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {29\%},
  abstract  = {We present a visual language for strategies in game theory, which has potential applications in economics, social sciences, and in general science education. This language facilitates explanations of strategies by visually representing the interaction of players' strategies with game execution. We have utilized the cognitive dimensions framework in the design phase and recognized the need for a new cognitive dimension of "traceability" that considers how well a language can represent the execution of a program. We consider how traceability interacts with other cognitive dimensions and demonstrate its use in analyzing existing languages. We conclude that the design of a visual representation for execution traces should be an integral part of the design of visual languages because understanding a program is often tightly coupled to its execution.},
}

@inproceedings{W08vld,
  author    = {Walkingshaw, Eric},
  title     = {{Designing Explanation-Oriented Languages}},
  booktitle = {{Doctoral Consortium at }} # VLHCC,
  year      = 2008,
  pages     = {274--275},
  kind      = {Consortium},
  status    = {Appeared},
  abstract  = {We are developing a new paradigm of explanation-oriented languages whose objective is not only to describe the computation of values, but also to provide explanations of how and why those values are obtained. We have begun exploring this approach in the design of a visual notation for strategies in game theory. We plan to apply these ideas to other domains of public interest to both benefit those domains and to expand and solidify the theory behind explanation-oriented design.}
}


@article{flashextract,
  Acmid = {2594333},
  Address = {New York, NY, USA},
  Author = {Le, Vu and Gulwani, Sumit},
  Doi = {10.1145/2666356.2594333},
  Issn = {0362-1340},
  Issue_Date = {June 2014},
  Journal = {SIGPLAN Not.},
  Keywords = {end-user programming, program synthesis, programming by examples},
  Month = jun,
  Number = {6},
  Numpages = {12},
  Pages = {542--553},
  Publisher = {ACM},
  Title = {FlashExtract: A Framework for Data Extraction by Examples},
  Url = {http://doi.acm.org/10.1145/2666356.2594333},
  Volume = {49},
  Year = {2014},
  Bdsk-Url-1 = {http://doi.acm.org/10.1145/2666356.2594333},
  Bdsk-Url-2 = {http://dx.doi.org/10.1145/2666356.2594333}}

@article{wrangler-2011,
  Acmid = {1979444},
  Address = {New York, NY, USA},
  Author = {Kandel, Sean and Paepcke, Andreas and Hellerstein, Joseph and Heer, Jeffrey},
  Booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
  Doi = {10.1145/1978942.1979444},
  Isbn = {978-1-4503-0228-9},
  Keywords = {data analysis, data cleaning, transformation, visualization, wrangler},
  Location = {Vancouver, BC, Canada},
  Numpages = {10},
  Pages = {3363--3372},
  Publisher = {ACM},
  Series = {CHI '11},
  Title = {Wrangler: Interactive Visual Specification of Data Transformation Scripts},
  Url = {http://doi.acm.org/10.1145/1978942.1979444},
  Year = {2011},
  Bdsk-Url-1 = {http://doi.acm.org/10.1145/1978942.1979444},
  Bdsk-Url-2 = {http://dx.doi.org/10.1145/1978942.1979444}}

@inproceedings{forgiving,
  Acmid = {3018740},
  Author = {Omari, Adi and Shoham, Sharon and Yahav, Eran},
  Doi = {10.1145/3018661.3018740},
  Journal = {Proceedings of the Tenth ACM International Conference on Web Search and Data Mining},
  Location = {Cambridge, United Kingdom},
  Numpages = {10},
  Pages = {385-394},
  Publisher = {ACM},
  Series = {WSDM '17},
  Title = {Synthesis of Forgiving Data Extractors},
  Url = {http://doi.acm.org/10.1145/3018661.3018740},
  Year = {2017},
  Bdsk-Url-1 = {http://doi.acm.org/10.1145/3018661.3018740},
  Bdsk-Url-2 = {http://dx.doi.org/10.1145/3018661.3018740}}

@inproceedings{robustNoiseResWrapper,
  Acmid = {2915214},
  Address = {New York, NY, USA},
  Author = {Furche, Tim and Guo, Jinsong and Maneth, Sebastian and Schallhart, Christian},
  Doi = {10.1145/2882903.2915214},
  Isbn = {978-1-4503-3531-7},
  Journal = {Proceedings of the 2016 International Conference on Management of Data},
  Keywords = {XPath, wrapper, wrapper induction, wrapper maintenance},
  Location = {San Francisco, California, USA},
  Numpages = {12},
  Pages = {773--784},
  Publisher = {ACM},
  Series = {SIGMOD '16},
  Title = {Robust and Noise Resistant Wrapper Induction},
  Url = {http://doi.acm.org/10.1145/2882903.2915214},
  Year = {2016},
  Bdsk-Url-1 = {http://doi.acm.org/10.1145/2882903.2915214},
  Bdsk-Url-2 = {http://dx.doi.org/10.1145/2882903.2915214}}

@inproceedings{xpathDalvi1,
  Acmid = {1559882},
  Address = {New York, NY, USA},
  Author = {Dalvi, Nilesh and Bohannon, Philip and Sha, Fei},
  Doi = {10.1145/1559845.1559882},
  Isbn = {978-1-60558-551-2},
  Journal = {Proceedings of the 2009 ACM SIGMOD International Conference on Management of Data},
  Keywords = {probabilistic tree-edit model, wrappers, xpath},
  Location = {Providence, Rhode Island, USA},
  Numpages = {14},
  Pages = {335--348},
  Publisher = {ACM},
  Series = {SIGMOD},
  Title = {Robust Web Extraction: An Approach Based on a Probabilistic Tree-edit Model},
  Url = {http://doi.acm.org/10.1145/1559845.1559882},
  Year = {2009},
  Bdsk-Url-1 = {http://doi.acm.org/10.1145/1559845.1559882},
  Bdsk-Url-2 = {http://dx.doi.org/10.1145/1559845.1559882}}

@inproceedings{xpathDalvi2,
  Acmid = {2406581},
  Address = {Berlin, Heidelberg},
  Author = {Parameswaran, Aditya and Dalvi, Nilesh and Garcia-Molina, Hector and Rastogi, Rajeev},
  Booktitle = {Proceedings of the VLDB Endowment},
  Location = {Seattle, Washington},
  Title = {Optimal Schemes for Robust Web Extraction},
  Year = {2011},
  }

@book{FOSPL16,
  title = {{Feature-Oriented Software Product Lines}},
  author = {Apel, Sven and Batory, Don and K{\"a}stner, Christian and Saake, Gunter},
  year = 2016,
  publisher = {Springer-Verlag},
  address = {Berlin}
}

@article{Thuem14,
  title = {{A Classification and Survey of Analysis Strategies for Software Product Lines}},
  author = {Th{\"u}m, Thomas and Apel, Sven and K{\"a}stner, Christian and Schaefer, Ina and Saake, Gunter},
  journal = {{ACM Computing Surveys (CSUR)}},
  volume = 47,
  number = 1,
  pages = 6,
  year = 2014,
  publisher = {ACM}
}

%%%%%%%%
% 2017 %
%%%%%%%%

@article{Prism08Curino,
 author = {Curino, Carlo A. and Moon, Hyun J. and Zaniolo, Carlo},
 title = {Graceful Database Schema Evolution: The PRISM Workbench},
 journal = {Proc. VLDB Endow.},
 issue_date = {August 2008},
 volume = {1},
 number = {1},
 month = aug,
 year = {2008},
 issn = {2150-8097},
 pages = {761--772},
 numpages = {12},
 url = {http://dx.doi.org/10.14778/1453856.1453939},
 doi = {10.14778/1453856.1453939},
 acmid = {1453939},
 publisher = {VLDB Endowment},
} 

@article{SchEvolRA90McKenzie,
 author = {McKenzie, E. and Snodgrass, Richard Thomas},
 title = {Schema Evolution and  the Relational Algebra},
 journal = {Inf. Syst.},
 issue_date = {1990},
 volume = {15},
 number = {2},
 month = may,
 year = {1990},
 issn = {0306-4379},
 pages = {207--232},
 numpages = {26},
 url = {http://dx.doi.org/10.1016/0306-4379(90)90036-O},
 doi = {10.1016/0306-4379(90)90036-O},
 acmid = {81544},
 publisher = {Elsevier Science Ltd.},
 address = {Oxford, UK, UK},
} 

@Inbook{Jensen2009,
author="Jensen, Christian S.
and Snodgrass, Richard T.",
editor="LIU, LING
and {\"O}ZSU, M. TAMER",
title="Temporal Query Languages",
bookTitle="Encyclopedia of Database Systems",
year="2009",
publisher="Springer US",
address="Boston, MA",
pages="3009--3012",
isbn="978-0-387-39940-9",
doi="10.1007/978-0-387-39940-9_407",
url="https://doi.org/10.1007/978-0-387-39940-9_407"
}

@book{tsql95Snodgrass,
author = {Snodgrass, Richard Thomas},
title = {The  TSQL2 Temporal Query Language},
year = {1995},
isbn = {0792396146},
publisher = {Kluwer Academic Publishers},
address = {USA}
}



@article{schVersioning97Castro,
title = "SCHEMA VERSIONING FOR MULTITEMPORAL RELATIONAL DATABASES††Recommended by Peri Loucopoulos",
journal = "Information Systems",
volume = "22",
number = "5",
pages = "249 - 290",
year = "1997",
issn = "0306-4379",
doi = "https://doi.org/10.1016/S0306-4379(97)00017-3",
url = "http://www.sciencedirect.com/science/article/pii/S0306437997000173",
author = "Cristina De Castro and Fabio Grandi and Maria Rita Scalas",
keywords = "Transaction-Time",
abstract = "In order to follow the evolution of application needs, a database management system is easily expected to undergo changes involving database structure after implementation. Schema evolution concerns the ability of maintaining extant data in response to changes in database structure. Schema versioning enables the use of extensional data through multiple schema interface as created by a history of schema changes. However, schema versioning has been considered only to a limited extent in current literature. Also in the field of temporal databases, whereas a great deal of work has been done concerning temporal versioning of extensional data, a thorough investigation of schema versioning potentialities has not yet been made. In this paper we consider schema versioning in a broader perspective and introduce new design options whose distinct semantic properties and functionalities will be discussed. First of all, we consider solutions for schema versioning along transaction time but also along valid time. Moreover, the support of schema versioning implies operations both at intensional and extensional level. Two distinct design solutions (namely single- and multi-pool) are presented for the management of extensional data in a system supporting schema versioning. Finally, a further distinction is introduced to define synchronous and asynchronous management of versioned data and schemata. The proposed solutions differ in their semantics and in the possible operations they support. The mechanisms for the selection of data through a schema version are in many cases strictly related to the particular schema versioning solution adopted, that also affects the data definition and manipulation language at user-interface level. In particular, we show how the temporal language TSQL2, originally designed to support basic functionalities of transaction-time schema versioning, can accordingly be extended. ©1997 Elsevier Science Ltd"
}

@article{tempSchEvol91Ariav,
title = "Temporally oriented data definitions: Managing schema evolution in temporally oriented databases",
journal = "Data \& Knowledge Engineering",
volume = "6",
number = "6",
pages = "451 - 467",
year = "1991",
issn = "0169-023X",
doi = "https://doi.org/10.1016/0169-023X(91)90023-Q",
url = "http://www.sciencedirect.com/science/article/pii/0169023X9190023Q",
author = "Gad Ariav",
keywords = "Temporally oriented databases, schema evolution",
abstract = "A simplifying — yet unrealistic — assumption widely held throughout the research of Temporally Oriented Data Models (TODM) is that the associated schema never changes. The implications of allowing data structures to evolve over time within a TODM and related databases are examined in this paper, and key issues and concepts are identified. Specifically, Temporally Oriented Data Definition (TODD) raises questions with respect to (1) the evolution of meanings in databases, (2) the nature of the temporal prevalence of database schema, and (3) the general principles that may guide the implementation of a TODM database with TODD."
}

@inproceedings{schEvolIssues03Ram,
  title={Research Issues in Database Schema Evolution: the Road Not Taken},
  author={Sudha Ram and Ganesan Shankaranarayanan},
  year={2003}
}

@article{schVersioningSurvey95Roddick,
title = "A survey of schema versioning issues for database systems",
journal = "Information and Software Technology",
volume = "37",
number = "7",
pages = "383 - 393",
year = "1995",
issn = "0950-5849",
doi = "https://doi.org/10.1016/0950-5849(95)91494-K",
url = "http://www.sciencedirect.com/science/article/pii/095058499591494K",
author = "John F Roddick",
keywords = "schema evolution, schema versioning, evolving database systems",
abstract = "Schema versioning is one of a number of related areas dealing with the same general problem—that of using multiple heterogeneous schemata for various database related tasks. In particular, schema versioning, and its weaker companion, schema evolution, deal with the need to retain current data and software system functionality in the face of changing database structure. Schema versioning and schema evolution offer a solution to the problem by enabling intelligent handling of any temporal mismatch between data and data structure. This survey discusses the modelling, architectural and query language issues relating to the support of evolving schemata in database systems. An indication of the future directions of schema versioning research is also given."
}

@incollection{mappingSchEvol03Velegrakis,
title = " - Mapping Adaptation under Evolving Schemas",
editor = "Johann-Christoph Freytag and Peter Lockemann and Serge Abiteboul and Michael Carey and Patricia Selinger and Andreas Heuer",
booktitle = "Proceedings 2003 VLDB Conference",
publisher = "Morgan Kaufmann",
address = "San Francisco",
pages = "584 - 595",
year = "2003",
isbn = "978-0-12-722442-8",
doi = "https://doi.org/10.1016/B978-012722442-8/50058-6",
url = "http://www.sciencedirect.com/science/article/pii/B9780127224428500586",
author = "Yannis Velegrakis and Renée J. Miller and Lucian Popa",
abstract = "Publisher Summary
This chapter identifies the problem of mapping adaptation in dynamic environments with evolving schemas. To achieve interoperability, modem information systems and e-commerce applications use mappings to translate data from one representation to another. In dynamic environments like the Web, data sources may change not only their data but also their schemas, their semantics, and their query capabilities. Such changes must be reflected in the mappings. The chapter motivates the need for an automated system to adapt mappings and describes several areas in which the solutions can be applied. This chapter presents a novel framework and a tool, Toronto Mapping Adaptation System (ToMAS), that automatically maintains the consistency of the mappings as schemas evolve. The approach is unique in many ways. It considers and manages a very general class of mappings including GLAV mappings. This chapter considers changes not only on the schema structure but also on the schema semantics either in the source or in the target. Further, it supports schema changes that involve multiple schema elements."
}

@inproceedings{semanticAdaptationSchEvol05Yu,
 author = {Yu, Cong and Popa, Lucian},
 title = {Semantic Adaptation of Schema Mappings when Schemas Evolve},
 booktitle = {Proceedings of the 31st International Conference on Very Large Data Bases},
 series = {VLDB '05},
 year = {2005},
 isbn = {1-59593-154-6},
 location = {Trondheim, Norway},
 pages = {1006--1017},
 numpages = {12},
 url = {http://dl.acm.org/citation.cfm?id=1083592.1083708},
 acmid = {1083708},
 publisher = {VLDB Endowment},
} 


@inproceedings{DBLP:conf/icdt/FaginKMP03,
author    = {Ronald Fagin and Phokion G. Kolaitis and Ren{\'{e}}e J. Miller and Lucian Popa},
title     = {{Data Exchange: Semantics and Query Answering}},
booktitle = {ICDT},
year      = {2003}
}

@BOOK{AliceBook,
  AUTHOR = {Serge Abiteboul and Richard Hull and Victor Vianu},
  TITLE = "{Foundations of Databases: The Logical Level}",
    PUBLISHER = {Addison-Wesley},
    YEAR= {1994}}

@book{probDbBook,
 author = {Suciu, Dan and Olteanu, Dan and Christopher, R. and Koch, Christoph},
 title = {Probabilistic Databases},
 year = {2011},
 isbn = {1608456803, 9781608456802},
 edition = {1st},
 publisher = {Morgan \& Claypool Publishers},
} 

@inproceedings{GW17mutation,
  author    = {Gopinath, Rahul and Walkingshaw, Eric},
  title     = {{How Good are Your Types? Using Mutation Analysis to Evaluate the Effectiveness of Type Annotations}},
  booktitle = Mutation,
  year      = 2017,
  cvnote    = {Best presentation},
  kind      = {Workshop},
  status    = {Appeared},
  rate      = {71\%},
}

@inproceedings{MMWWK17vamos,
  author    = {Meng, Meng and Meinicke, Jens and Wong, Chu-Pan and Walkingshaw, Eric and K\"{a}stner, Christian},
  title     = {{A Choice of Variational Stacks: Exploring Variational Data Structures}},
  booktitle = VaMoS,
  year      = 2017,
  pages     = {28--35},
  kind      = {Workshop},
  status    = {Appeared},
  rate      = {38\%},
}

@inproceedings{HW16fosd,
  author    = {Hubbard, Spencer and Walkingshaw, Eric},
  title     = {{Formula Choice Calculus}},
  booktitle = FOSD,
  year      = 2016,
  pages     = {49--57},
  kind      = {Workshop},
  status    = {Appeared},
  rate      = {69\%},
}

@inproceedings{SBWW16icsme,
  author    = {St\u{a}nciulescu, Stefan and Berger, Thorsten and Walkingshaw, Eric and Andrzej Wasowski},
  title     = {{Concepts, Operations, and Feasibility of a Projection-Based Variation Control System}},
  booktitle = ICSME,
  year      = 2016,
  pages     = {323--333},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {29\%},
}

@inproceedings{CEW16ecoop,
  author    = {Chen, Sheng and Erwig, Martin and Walkingshaw, Eric},
  title     = {{A Calculus for Variational Programming}},
  booktitle = ECOOP,
  year      = 2016,
  pages     = {6:1--6:26},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {32\%},
}

@inproceedings{ABW15vl,
  author    = {Abbott, Keeley and Bogart, Christopher and Walkingshaw, Eric},
  title     = {{Programs for People: What We Can Learn from Lab Protocols}},
  booktitle = VLHCC,
  year      = 2015,
  pages     = {203--211},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {29\%},
  abstract  = {Humans play an active role in the execution of certain kinds of programs, such as spreadsheets, workflows, and interactive notebooks. Interacting closely with execution is especially useful when end-users are learning from examples while doing their work. In order to better understand the language features needed to support this kind of use, we investigated a particularly rigid and formalized category of “program” people write for each other: lab protocols. These protocols present a linear, idealized process despite the complex contingencies of the lab work they describe. However, they employ a variety of techniques for limiting or expanding the semantic interpretation of individual steps and for integrating outside protocols. We use these observations to derive implications for the design of interactive and mixed-initiative programming languages.}
}

@inproceedings{Walk14onward,
  author   = {Walkingshaw, Eric and K\"{a}stner, Christian and Erwig, Martin and Apel, Sven and Bodden, Eric},
  title    = {{Variational Data Structures: Exploring Trade-Offs in Computing with Variability}},
  booktitle = Onward,
  year     = 2014,
  pages    = {213--226},
  kind     = {Conference},
  status   = {Appeared},
  rate     = {46\%},
  abstract = {Variation is everywhere. Especially in the construction and analysis of customizable software, there arises a need for correspondingly variational data structures. So far, variational data structures have been explored and developed ad-hoc, as required for each individual use case. This perspective paper is a first attempt and a call to action for more systematic and foundational research in this area. We describe how support for variation can be understood as a general and orthogonal property of data types, data structures, and algorithms. We begin a systematic exploration of basic variational data structures, exploring the tradeoffs between different implementations. Finally, we retrospectively analyze the design decisions in our own previous work where we have independently encountered problems requiring variational data structures, and in the work of others who needed to represent and reason about variation.}
}

@inproceedings{WO14gpce,
  author    = {Walkingshaw, Eric and Ostermann, Klaus},
  title     = {{Projectional Editing of Variational Software}},
  booktitle = GPCE,
  year      = 2014,
  pages     = {29--38},
  cvnote    = {\textbf{Best~paper}},
  kind      = {Conference},
  status    = {Appeared},
  rate      = {30\%},
  abstract  = {Editing the source code of variational software is complicated by the presence of variation annotations, such as \#ifdef statements, and by code that is only included in some configurations. When we want to edit some configurations and not others, it would be easier to edit a simplified version of the source code that contains only the variability we currently care about. In this paper, we present a projectional editing model for variational software. Using our approach, a programmer can partially configure a variational program, edit this simplified view of the code, and then automatically update the original, fully variational source code. The model is based on an isolation principle where edits affect only the variants that are visible in the view. We show that this principle has several nice properties that are suggested by related work on bidirectional transformations.}
}

@article{CEW14toplas,
  author   = {Chen, Sheng and Erwig, Martin and Walkingshaw, Eric},
  title    = {{Extending Type Inference to Variational Programs}},
  journal  = TOPLAS,
  year     = 2014,
  volume   = 36,
  number   = 1,
  pages    = {1:1--1:54},
  kind     = {Journal},
  status   = {Appeared},
  abstract = {Through the use of conditional compilation and related tools, many software projects can be used to generate a huge number of related programs. The problem of typing such variational software is difficult. The brute-force strategy of generating all variants and typing each one individually is (1) usually infeasible for efficiency reasons and (2) produces results that do not map well to the underlying variational program. Recent research has focused mainly on efficiency and addressed only the problem of type checking. In this work we tackle the more general problem of variational type inference and introduce variational types to represent the result of typing a variational program. We introduce the variational lambda calculus (VLC) as a formal foundation for research on typing variational programs. We define a type system for VLC in which VLC expressions are mapped to correspondingly variational types. We show that the type system is correct by proving that the typing of expressions is preserved over the process of variation elimination, which eventually results in a plain lambda calculus expression and its corresponding type. We identify a set of equivalence rules for variational types and prove that the type unification problem modulo these equivalence rules is unitary and decidable; we also present a sound and complete unification algorithm. Based on the unification algorithm, the variational type inference algorithm is an extension of algorithm W . We show that it is sound and complete and computes principal types. We also consider the extension of VLC with sum types, a necessary feature for supporting variational data types, and demonstrate that the previous theoretical results also hold under this extension. Finally, we characterize the complexity of variational type inference and demonstrate the efficiency gains over the brute-force strategy.}
}



@ARTICLE{bowman:reasoning,
  AUTHOR = "Mic Bowman and Saumya K. Debray and Larry L. Peterson",
  TITLE = "Reasoning About Naming Systems",
  JOURNAL = "ACM Trans. Program. Lang. Syst.",
  VOLUME = {15},
  NUMBER = {5},
  PAGES = {795-825},
  MONTH = "November",
  YEAR = {1993} }

@ARTICLE{braams:babel,
  AUTHOR = "Johannes Braams",
  TITLE = "Babel, a Multilingual Style-Option System for Use with LaTeX's Standard Document Styles",
  JOURNAL = {TUGboat},
  VOLUME = {12},
  NUMBER = {2},
  PAGES = {291-301},
  MONTH = "June",
  YEAR = {1991} }

@INPROCEEDINGS{clark:pct,
  AUTHOR = "Malcolm Clark",
  TITLE = "Post Congress Tristesse",
  BOOKTITLE = "TeX90 Conference Proceedings",
  PAGES = "84-89",
  ORGANIZATION = "TeX Users Group",
  MONTH = "March", 
  YEAR = {1991} }

@ARTICLE{herlihy:methodology,
  AUTHOR = "Maurice Herlihy",
  TITLE = "A Methodology for Implementing Highly Concurrent
  Data Objects",
  JOURNAL = {ACM Trans. Program. Lang. Syst.},
  VOLUME = {15},
  NUMBER = {5},
  PAGES = {745-770},
  MONTH = "November",
  YEAR = {1993} }

@BOOK{Lamport:LaTeX,
  AUTHOR = "Leslie Lamport",
  TITLE = "LaTeX User's Guide and Document Reference Manual",
  PUBLISHER = "Addison-Wesley Publishing Company",
  ADDRESS = "Reading, Massachusetts",
  YEAR = "1986" }

@BOOK{salas:calculus,
  AUTHOR = "S.L. Salas and Einar Hille",
  TITLE = "Calculus: One and Several Variable",
  PUBLISHER = "John Wiley and Sons",
  ADDRESS = "New York",
  YEAR = "1978" }





